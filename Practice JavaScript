<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    
</head>
<body>
    <h1>Ejercicios de Lógica de Programación</h1>
<script> 

console.log(".................EJERCICIO 1...............") 
/*
1) Programa una función que cuente el número 
de caracteres de una cadena de texto,
pe. miFuncion("Hola Mundo") devolverá 10.
*/

let miFuncion = "Hola Mundo";
console.log(miFuncion);
console.log(miFuncion.length);

console.log("................Intento 2.................")
//Creando una funcion
function miFuncion2 (texto){
    return texto.length;
}
console.log(miFuncion2("Hola Mundo"));


console.log("........SOLUCION.........EJERCICIO 1...............");

//SOLUCION DE MUCHO CODIGO:
/*
function contarCaracteres(cadena=""){
    if(!cadena){
        console.warm ("No ingresaste ninguna cadena"); 
    } else {
        console.info(`La cadena "${cadena} tiene ${cadena.length} caracteres`);
    }
}
contarCaracteres("Hola Mundo");
*/

const contarCaracteres = (cadena = "") => 
    (!cadena) 
    ?console.warn("no ingresaste cadena")
    :console.info(`La cadena "${cadena}"tiene ${cadena.length} caracteres`); 

contarCaracteres("Hola Mundo");


















console.log("....................EJERCICIO 2............");
/*
2) Programa una función que te devuelva el texto 
recortado según el número de caracteres 
indicados, pe. miFuncion("Hola Mundo", 4) 
devolverá "Hola".
*/

//Inviertiendo el orden de la funcion anterior
function miFuncion3 (texto, caracteres){
    return texto.slice (0, caracteres);
}
console.log(miFuncion3("Hola Mundo",4));






console.log("........SOLUCION.........EJERCICIO 2........");
const recortarTexto = (cadena = "", longitud = undefined) =>
(!cadena)
? console.warn("No ingresaste cadena")
:(longitud ===undefined)
    ?console.warn("No ingresaste longitud")
    :console.info(cadena.slice(0, longitud)); 

recortarTexto("Hola Mundo",4); 
recortarTexto();
recortarTexto("Hola Hola");
recortarTexto("",5);



















console.log("....................EJERCICIO 3............");
/*
3) Programa una función que dada una String 
te devuelva un Array de textos separados 
por cierto caracter, pe. miFuncion
('hola que tal', ' ') 
devolverá ['hola', 'que', 'tal'].
*/
let saludar = "Hola que tal";
console.log(saludar.trim(),
saludar.split(" ")); 

console.log("........SOLUCION.........EJERCICIO 3........");

const cadenaAArreglo =(cadena = "", separador = undefined) =>
(!cadena)
? console.warn("No ingresaste cadena")
:(separador ===undefined)
    ?console.warn("No ingresaste el caracter separador")
    :console.info(cadena.split(separador));

cadenaAArreglo("Hola que tal", " "); 
cadenaAArreglo(); 
cadenaAArreglo("Hola Mundo"); 
cadenaAArreglo("", " "); 












console.log("....................EJERCICIO 4............");
/*
4) Programa una función que repita un texto 
X veces, pe. miFuncion('Hola Mundo', 3) 
devolverá Hola Mundo Hola Mundo Hola Mundo.
*/
function miFuncion4(texto, veces) {
    let resultado = "";
    for (let i = 0; i < veces; i++) {
        resultado += texto;
        if (i < veces - 1) {
            resultado += " ";
        }
    }
    return resultado;
}


console.log(miFuncion4('Hola Mundo', 3)); 
console.log("........SOLUCION.........EJERCICIO 4.......");

const repetirTexto = (texto ="", veces = undefined) =>{
    if (!texto) return console.warn("No ingresaste un texto"); 
    
    if (!veces === undefined) return console.warn("No ingresaste el nº de veces de repetir"); 

    if (!veces === 0) return console.error("no puede ser 0");

    if (Math.sign(veces) === -1) return console.error("no puede ser nº negativos"); 

    for(let i=1; i<= veces; i++)console.info(`${texto}, ${i}`);

}
repetirTexto("Hola Mundo", 3); 
repetirTexto("Hola Mundo", 0); 
repetirTexto("Hola Mundo", -20); 
repetirTexto("", 5); 
repetirTexto("Hola"); 


console.clear();
console.warn("SE HA EJECUTADO UN CLEAR PARA LOS EJ 1 - 4"); 



console.log(".................EJERCICIO 5...............") 
/*
5) Programa una función que invierta las palabras 
de una cadena de texto, pe. miFuncion("Hola Mundo") 
devolverá "odnuM aloH".
*/

function invertirPalabras(cadena) {
    // Dividir la cadena en palabras usando el espacio como separador
    var palabras = cadena.split(" ");
    
    // Invertir cada palabra individualmente
    var palabrasInvertidas = palabras.map(function(palabra) {
        return palabra.split("").reverse().join("");
    });
    
    // Unir las palabras invertidas en una cadena nuevamente
    var cadenaInvertida = palabrasInvertidas.join(" ");
    
    return cadenaInvertida;
}

// Ejemplo de uso
var textoInvertido = invertirPalabras("Hola Mundo");
console.log(textoInvertido); // Resultado: "odnuM aloH"

console.log("........SOLUCION.........EJERCICIO 5...........");

const invertirCadena = (cadena = "") =>
    (!cadena)
        ? console.warn("No ingresaste una cadena de texto")
        : console.info(cadena.split("").reverse().join(""));

invertirCadena("Hola Mundo");
invertirCadena("JavaScript es un lenguaje de programación")























console.log(".................EJERCICIO 6...............") 
/*
6) Programa una función para contar el número de veces
que se repite una palabra en un texto largo, 
pe. miFuncion("hola mundo adios mundo", "mundo") devolverá 2.
*/
function contarRepeticiones(texto, palabra) {
    // Dividir el texto en palabras usando el espacio como separador
    var palabras = texto.split(" ");
    
    // Inicializar un contador para contar las repeticiones de la palabra
    var contador = 0;
    
    // Recorrer cada palabra en el array
    for (var i = 0; i < palabras.length; i++) {
        // Comparar la palabra actual con la palabra a buscar (sin distinción entre mayúsculas y minúsculas)
        if (palabras[i].toLowerCase() === palabra.toLowerCase()) {
            // Incrementar el contador si las palabras coinciden
            contador++;
        }
    }
    
    return contador;
}

// Ejemplo de uso
var repeticiones = contarRepeticiones("hola mundo adios mundo", "mundo");
console.log(repeticiones); // Resultado: 2

console.log("........SOLUCION.........EJERCICIO 6.....");

const textoEnCadena= (cadena = "", texto = "")=>{
    if (!cadena) return console.warn("No ingresaste Texto largo"); 
    
    if (!texto) return console.warn("No ingresaste palabra"); 
    
    let i = 0, 
    contador = 0; 

        while(i !== - 1){
            i = cadena.indexOf(texto, i);
        if (i !== -1){
            i++,
            contador++;
            }
        }
return console.info(`La palabra ${texto} se repite ${contador} veces`);
}


textoEnCadena(); 
textoEnCadena("", "mundo"); 
textoEnCadena("hola mundo adios mundo"); 
textoEnCadena("hola mundo adios mundo","mundo"); 
textoEnCadena("hola mundo, yolo mundo adios mundo","mundo");

















console.log(".................EJERCICIO 7...............") 
/*
7) Programa una función que valide si una palabra 
o frase dada, es un palíndromo 
(que se lee igual en un sentido que en otro),
 pe. mifuncion("Salas") devolverá true.
*/

function esPalindromo(palabra) {
    // Convertir la palabra a minúsculas y eliminar los espacios en blanco
    var palabraFormateada = palabra.toLowerCase().replace(/\s/g, "");
    
    // Invertir la palabra
    var palabraInvertida = palabraFormateada.split("").reverse().join("");
    
    // Comparar la palabra original con la palabra invertida
    return palabraFormateada === palabraInvertida;
}

// Ejemplo de uso
console.log(esPalindromo("Salas")); // Devolverá true
console.log(esPalindromo("Amar a la rama")); // Devolverá true
console.log(esPalindromo("Hola Mundo")); // Devolverá false

console.log("........SOLUCION.........EJERCICIO 7.......");

const palindromo = (palabra = "") => {
if (!palabra) return console.warn("No ingresaste palabra o frase"); 

palabra = palabra.toLowerCase();
let alReves = palabra.split("").reverse().join("");

return (palabra === alReves)
    ?console.info(`Si es palindromo ${palabra} y ${alReves}`)
    :console.info(`No es palindromo ${palabra} y ${alReves}`);
}

palindromo();
palindromo("Hola mundo");
palindromo("SaLas");















console.log(".................EJERCICIO 8...............") 
/*
8) Programa una función que elimine cierto patrón 
de caracteres de un texto dado,
 pe. miFuncion("xyz1, xyz2, xyz3, xyz4 y xyz5", "xyz") 
 devolverá  "1, 2, 3, 4 y 5.
*/

function eliminarPatron(texto, patron) {
    // Crear una expresión regular a partir del patrón
    var expresionRegular = new RegExp(patron, 'g');
    
    // Reemplazar todas las ocurrencias del patrón por una cadena vacía
    var textoModificado = texto.replace(expresionRegular, '');
    
    return textoModificado;
}

// Ejemplo de uso
var textoModificado = eliminarPatron("xyz1, xyz2, xyz3, xyz4 y xyz5", "xyz");
console.log(textoModificado); // Devolverá "1, 2, 3, 4 y 5"

console.log("........SOLUCION.........EJERCICIO 8.....");

const elimiarCaracteres = (texto = "", patron = "") =>
(!texto)
    ? console.warn("No ingresaste un texto")
    : (!patron)
        ? console.warn("No ingreaste un patron")
        : console.info(texto.replace(new RegExp(patron, "ig"),""));

elimiarCaracteres();
elimiarCaracteres("xyz1, xyz2, xyz3, xyz4 y xyz");
elimiarCaracteres("", "xyz");
elimiarCaracteres("xyz1, xyz2, xyz3, xyz4 y xyz5", "xyz");
elimiarCaracteres("xyz1, xyz2, xyz3, xyz4 y xyz5", "x");
elimiarCaracteres("xyz1, xyz2, xyz3, xyz4 y xyz5", "[a-z]");
















console.clear();
console.warn("SE HA EJECUTADO UN CLEAR PARA LOS EJ 5 - 8"); 

console.log(".................EJERCICIO 9...............") 
/*
9) Programa una función que obtenga
 un numero aleatorio entre 501 y 600.
*/

const generarNumero = (minimo, maximo) => {
  if (!minimo || !maximo) return (console.warn("No ingresaste un número valido"));
 let rango = maximo - minimo + 1; 
return console.info(Math.floor(Math.random()*rango)+minimo);
}
 
generarNumero();
generarNumero(1,10);
generarNumero(501,600);


console.log("........SOLUCION.........EJERCICIO 9.....");


const aleatorio = () => console.info(Math.round((Math.random()*100)+ 500));

aleatorio();






















console.log(".................EJERCICIO 10..............") 
/*
10) Programa una función que reciba un número
 y evalúe si es capicúa o no 
 (que se lee igual en un sentido que en otro),
  pe. miFuncion(2002) devolverá true.
*/

const capicua= (numero = "") => {
if (!numero) return console.warn("No ingresaste numero"); 

let numeroAlReves = numero.toString().split("").reverse().join("");

return (numero.toString() === numeroAlReves)
 ?console.info(`${true}, ${numero} Si es capicua`)
 :console.info(`${false}, ${numero} No es capicua`);
}


capicua(102);
capicua(2002);



console.log("........SOLUCION.........EJERCICIO 10....");

const capicua2 = (numero= 0)=>{
    if (!numero) return console.warn("No ingresaste numero"); 
    if (typeof numero !== "number") return console.error(`El valor "${numero}" ingresado, NO es un numero`);

    numero = numero.toString();
    let alReves2 = numero.split("").reverse().join(""); 

    return (numero) === (alReves2)
?console.info(`Si es capicua, el nº ${numero} y el ${alReves2}`)
:console.info(`No es capicua, el nº ${numero} y el ${alReves2}`);
}

capicua2(); 
capicua2("19"); 
capicua2({}); 
capicua2(2000); 
capicua2(2002); 
capicua2(212.212); 
capicua2(18.99); 
























console.log(".................EJERCICIO 11..............") 
/*
11) Programa una función que calcule el factorial de un número 
(El factorial de un entero positivo n, 
se define como el producto de todos los números enteros 
positivos desde 1 hasta n), 
pe. miFuncion(5) devolverá 120.
*/


const factorial = (numero = "") => {
if (!numero) return console.warn("No ingresaste numero"); 
if (numero === 0 ) return 1; 

let resultado = 1; 
for (let i = 1; i <= numero; i++) {
    resultado *=i;
}
return console.info(resultado);
}

factorial(); 
factorial(5);
factorial(- 5);



console.log("........SOLUCION.........EJERCICIO 11....");
//Intentar siempre hacer todas las validaciones antes de crear la formula

const factorial2 = (numero = undefined) => {
if (!numero) return console.warn("No ingresaste numero"); 
if (typeof numero !== "number") return console.error(`El valor "${numero}" ingresado, NO es un numero`);
if (!numero === 0) return console.error("El numero no puede ser 0"); 
if (Math.sign(numero)=== -1 )return console.error("El numero no puede ser negativo"); 

let factorial2 = 1; 
for (let i = numero; i > 1; i--) {
    factorial2 *= i;
}

return console.info(`El factorial de ${numero} es ${factorial2}`);
}


factorial2(); 
factorial2("");
factorial2([1,2,3]);
factorial2(0);
factorial2(-5);
factorial2(5);
factorial2(8);






console.clear();
console.warn("SE HA EJECUTADO UN CLEAR PARA LOS EJ 9 - 11"); 


console.log(".................EJERCICIO 12..............") 
/*
12) Programa una función que determine si un número es primo 
(aquel que solo es divisible por sí mismo y 1) o no,
 pe. miFuncion(7) devolverá true.
*/

const numeroPrimo = (numero = undefined) => {

if (!numero) return console.warn("No ingresaste numero"); 
if (typeof numero !== "number") return console.error(`El valor "${numero}" ingresado, NO es un numero`);
if (numero === 0) return console.error("El numero no puede ser 0"); 
if (Math.sign(numero)=== -1 )return console.error("El numero no puede ser negativo"); 

let esPrimo = true;

for(let i = 2; i <= Math.sqrt(numero); i++) {
if (numero % i === 0 ) { esPrimo =false;
    break;
        }
    }
return esPrimo
?console.info(`${true}, Si es un Numero primo el ${numero}`)
:console.info(`${false}, No es un Numero primo el ${numero}`);
} 

numeroPrimo(); 
numeroPrimo("1"); 
numeroPrimo(0); 
numeroPrimo(1); 
numeroPrimo(2); 
numeroPrimo(7); 
numeroPrimo(1236498825); 
numeroPrimo(9); 

console.log("........SOLUCION.........EJERCICIO 12....");


const numeroPrimo2 = (numero = undefined) => {

if (!numero) return console.warn("No ingresaste numero"); 
if (typeof numero !== "number") return console.error(`El valor "${numero}" ingresado, NO es un numero`);
if (numero === 0) return console.error("El numero no puede ser 0"); 
if (numero === 1) return console.error("El numero no puede ser 1"); 
if (Math.sign(numero)=== -1 )return console.error("El numero no puede ser negativo"); 

let divisible = false; 

for (let i = 2; i < numero; i++ ){
    if (numero % i === 0) {
        divisible = true; 
        break;
    }
}

return (divisible)
? console.info(`El número ${numero}, NO es primo`)
: console.info(`El número ${numero}, SI es primo`);
}

numeroPrimo2(); 
numeroPrimo2("320"); 
numeroPrimo2(0); 
numeroPrimo2(1); 
numeroPrimo2(-13); 
numeroPrimo2(13); 
numeroPrimo2(200); 















console.log(".................EJERCICIO 13..............") 
/*
13) Programa una función que determine si un número es par o impar,
pe. miFuncion(29) devolverá Impar.
*/

const numParImpar = (numero = undefined) => {

if (!numero) return console.warn("No ingresaste numero"); 
if (typeof numero !== "number") return console.error(`El valor "${numero}" ingresado, NO es un numero`);
if (numero === 0) return console.error("El numero no puede ser 0"); 
if (Math.sign(numero)=== -1 )return console.error("El numero no puede ser negativo"); 

if (numero % 2 ===0){
     return console.info(`El numero ${numero} es par`); 
} else {
    return console.info(`El numero ${numero} es impar`);
}
}

numParImpar (); 
numParImpar ("2"); 
numParImpar (0); 
numParImpar (-1); 
numParImpar (3); 
numParImpar (4);

console.log("........SOLUCION.........EJERCICIO 13....");


const numeroParImpar = (numero = undefined) => {
if (!numero) return console.warn("No ingresaste numero"); 
if (typeof numero !== "number") return console.error(`El valor "${numero}" ingresado, NO es un numero`);

return ((numero % 2) === 0)
?console.info(`El numero ${numero} es Par`)
:console.info(`El numero ${numero} es Impar`);
}

numeroParImpar();
numeroParImpar("23");
numeroParImpar(-398);
numeroParImpar(19);

















console.log(".................EJERCICIO 14..............") 
/*
14) Programa una función para convertir grados Celsius a Fahrenheit 
y viceversa, 
pe. miFuncion(0,"C") devolverá 32°F.
*/

const gradosCelFahr = (temperatura, tipo) => {

if (!temperatura) return console.warn("No ingresaste la temperatura"); 
if (!tipo) return console.warn("No ingresaste el tipo, por favor, elige `Celsius` o `Fahrenheit`."); 

if (tipo === "Celsius") {
    var fahrenheit = temperatura * (9/5) + 32; 
    return console.info(`${temperatura} grados Celsius son ${fahrenheit} grados Faherenheit`); 
} else if (tipo === "Fahrenheit"){
    var celsius = (temperatura - 32) * (5/9); 
    return console.info(`${temperatura} grados Fahrenheit son ${celsius} grados Celsius`); 
}
}

gradosCelFahr(); 
gradosCelFahr(20, ); 
gradosCelFahr(70,""); 
gradosCelFahr( 20,"Fahrenheit"); 
gradosCelFahr( 20,"Celsius"); 



console.log("........SOLUCION.........EJERCICIO 14....");

const convertirGrados = (grados = undefined, unidad = undefined) => {

if (grados === undefined) return console.warn("No ingresaste grados a convertir"); 
if (typeof grados !== "number") return console.error(`El valor "${grados}" ingresado , NO es un número`); 
if (unidad === undefined) return console.warn ("No ingresaste el tipo de grado a convertir")
if (typeof unidad !== "string") return console.error(`El valor "${unidad}" ingresado , NO es una cadena de texto`); 
if (unidad.length !== 1 || !/(C|F)/.test(unidad)) return console.warn("Valor de unidad no reconocido")

if (unidad === "C") {
    return console.info(`${grados}º C = ${Math.round((grados * (9/5))+ 32)}ºF`);
} else if (unidad === "F"){
    return console.info(`${grados}º F = ${Math.round(((grados - 32) * (5/9)))} ºC`)
} else {
    return console.error("El tipo degrados a convertir NO es válido")
}


console.info("funciono")
}


convertirGrados(); 
convertirGrados("2"); 
convertirGrados(2); 
convertirGrados(2, true); 
convertirGrados(2, true); 
convertirGrados(2,"Hola"); 
convertirGrados(2,"E"); 
convertirGrados(100,"C"); 
convertirGrados(32,"F"); 

















console.clear();
console.warn("SE HA EJECUTADO UN CLEAR PARA LOS EJ 12 - 14"); 



console.log(".................EJERCICIO 15..............");
/*
15) Programa una función para convertir números de base
 binaria a decimal y viceversa,
 pe. miFuncion(100,2) devolverá 4 base 10.
*/

const numBinarioDecimal = (numero = undefined, base = undefined) => {

if (!numero) return console.warn("No ingresaste numero"); 
if (base !== 2 && base !== 10) return console.error(`El valor "${base}" ingresado, NO es valido, elige entre "2" binario o "10" decimal`);
if (base === 2 && !/^[01]+$/.test(numero)) return console.warn(`El numero binario ${numero} solo puede contener 0s y 1s`); 
if (base === 10 && (numero % 1 !== 0 || numero < 0)) return console.error(`El numero decimal ${numero} debe ser un entero positivo`);

let resultado;
if (base === 2) {
    resultado = parseInt(numero, 2);
        } else {
    resultado = numero.toString(2);
       } 
return console.info (`El resultado es: ${resultado}`); return resultado; 
}


numBinarioDecimal(); 
numBinarioDecimal("Hola"); 
numBinarioDecimal(1515,15151); 
numBinarioDecimal(101010,12); 
numBinarioDecimal(-10,2); 

console.log(numBinarioDecimal("100",2)); 
console.log(numBinarioDecimal(100, 10)); 



console.log("........SOLUCION.........EJERCICIO 15....");

const convertirBinarioDecimal = (numero = undefined, base = undefined) =>{

if (numero === undefined) return console.warn("No ingresaste el número a convertir"); 
if (typeof numero !== "number") return console.error(`El valor "${numero}" ingresado , NO es un número`); 
if (base === undefined) return console.warn("No ingresaste la base a convertir"); 
if (typeof base !== "number") return console.error(`El valor "${base}" ingresado , NO es un número`); 

if (base === 2) {
        return console.info(`${numero} base ${base} = ${parseInt(numero,base)} base 10`);
    } else if (base === 10){
        return console.info(`${numero} base ${base} = ${(numero.toString(base))} base 2`);
    } else {
return console.error(`El tipo de base a convertir NO es válido`)
    }
}

convertirBinarioDecimal();
convertirBinarioDecimal("2");
convertirBinarioDecimal(100);
convertirBinarioDecimal(100, "2");
convertirBinarioDecimal(100, 2);
convertirBinarioDecimal(4, 10);
convertirBinarioDecimal(4, 3);




























console.log(".................EJERCICIO 16..............");
/*
16) Programa una función que devuelva el monto final 
después de aplicar un descuento a una cantidad dada,
 pe. miFuncion(1000, 20) devolverá 800.
*/ 


const Descuento = (cantidad = undefined, descuento = undefined) => {

if (cantidad === undefined || descuento === undefined) return console.warn("No ingresaste la cantidad o el descuento a aplicar"); 
if (typeof cantidad !== `number` || cantidad <= 0) return console.error(`La cantidad "${cantidad}"" debe ser un entero positivo`);
if (typeof descuento !== `number` || descuento < 0 || descuento > 100 ) return console.error(`El descuento "${descuento}" debe ser un numero en el rango de 0 a 100.`); 

let calcularDescuento = (cantidad * descuento) / 100; 
let calcularConDescuento = cantidad - calcularDescuento; 
return console.info (`La cantidad ${cantidad} con el descuento del ${descuento}% es ${calcularConDescuento}.`)
}

Descuento(); 
Descuento(100, "Hola"); 
Descuento("Hola", 10); 
Descuento(-100, 10); 
Descuento(1000, 20); 

console.log("........SOLUCION.........EJERCICIO 16....");

const aplicarDescuento = (monto = undefined, descuento = 0) => {

    if (monto === undefined) return console.warn("No ingresaste el monto"); 
    if (typeof monto !== "number") return console.error(`El valor "${monto}" ingresado, NO es un número`);
    if (monto === 0) return console.error("El monto no puede ser 0"); 
    if (Math.sign(monto) === -1) return console.error ("El monto no puede ser negativo");

    if (typeof descuento !== "number") return console.error(`El valor "${descuento}" ingresado, NO es un número`);
    if (Math.sign(descuento) === -1) return console.error ("El descuento no puede ser negativo");

return console.info(`${monto} - ${descuento}% = ${monto - ((monto*descuento) /100) }`);
}

aplicarDescuento(); 
aplicarDescuento("1"); 
aplicarDescuento(0); 
aplicarDescuento(-1000); 
aplicarDescuento(1000,"20"); 
aplicarDescuento(1000,-20); 
aplicarDescuento(1000); 
aplicarDescuento(1000,25); 




















console.log(".................EJERCICIO 17..............");

/*
17) Programa una función que dada una fecha válida 
determine cuantos años han pasado hasta el día de hoy, 
pe. miFuncion(new Date(1984,4,23)) devolverá 35 años (en 2020).
*/

const calcularAnios = (dia = undefined, mes = undefined, anio = undefined) => {

if (anio === undefined || mes === undefined || dia === undefined) return console.warn("No ingresaste el año, mes o dia"); 
if (typeof dia !== `number` || dia <= 1 || dia > 31) return console.error(`El dia "${dia}"" debe ser un numero entre el 1 y el 31`); 
if (typeof mes !== `number` || mes < 1 || mes > 12) return console.error(`El mes "${mes}"" debe ser un numero entre el 1 y 12`); 
if (typeof anio !== `number` || anio <= 0) return console.error(`El año "${anio}"" debe ser un entero positivo`); 



let fechaDada = new Date (anio, mes -1, dia); 
let fechaActual = new Date (); 
let diferenciaAnios = fechaActual.getFullYear() - fechaDada.getFullYear(); 
return console.info (`Han pasado ${diferenciaAnios} años.`)
}

calcularAnios(); 
calcularAnios("Hola"); 
calcularAnios(2, -1, 1665656); 
calcularAnios(2, 1, 1900); 
calcularAnios(23 ,4 , 1984); 
calcularAnios(23, 10, 1991); 
calcularAnios(14, 5, 2024); 
calcularAnios(14, 6, 2023); 


console.log("........SOLUCION.........EJERCICIO 17....");

calcularAnios2 = (fecha = undefined) => {
    if (fecha === undefined) return console.warn("No ingresaste la fecha"); 
    //el formato instaceof permite compara y validar valores compuestos
    if (!(fecha instanceof Date)) return console.error("El valor que ingresaste no es una fecha válida"); 

let hoyMenosFecha = new Date().getTime() - fecha.getTime(), 
// 1000 (milisegundos de JavaScript)*60 (segundos en 1 minuto) * 60 (minutos en 1 hora) *24 (horas en 1 dia) *365 (dias) * 10 (decada) *5 (lustros)
// 1000 (milisegundos de JavaScript)*60 (segundos en 1 minuto) * 60 (minutos en 1 hora) *52 (semanas en un año)

aniosEnMS = 1000 *60 * 60 *24 *365
aniosHumanos = Math.floor(hoyMenosFecha/aniosEnMS); 

return (Math.sign(aniosHumanos) ===-1)
? console.info(`Faltan ${Math.abs (aniosHumanos)} años para el ${fecha.getFullYear()}`)
: (Math.sign(aniosHumanos) === 1) 
    ?console.info(`Han pasado ${aniosHumanos} años, des del ${fecha.getFullYear()}`)
    :console.info(`Estamos en el año actual ${fecha.getFullYear()}.`)
}

calcularAnios2();
calcularAnios2({});
calcularAnios2(false);
calcularAnios2(new Date());
calcularAnios2(new Date (1991,9,23));
calcularAnios2(new Date (1891,9,23));
calcularAnios2(new Date (2081,9,23));












console.clear();
console.warn("SE HA EJECUTADO UN CLEAR PARA LOS EJ 15 - 17"); 


console.log(".................EJERCICIO 18..............");
/*
18) Programa una función que dada una cadena de texto cuente 
el número de vocales y consonantes,
 pe. miFuncion("Hola Mundo") devuelva Vocales: 4, Consonantes: 5.
*/

contarVocales = (palabra = "") => {

if (!palabra) return console.info(`No ingresaste palabra o frase `); 
if (typeof palabra !== 'string') return console.error(`"${palabra}" no es una cadena de texto válida`);
if (palabra.trim() === "") return console.info(`La palabra "${palabra}" no es una palabra o frase`);

palabra = palabra.toLowerCase(); 
let vocales = 0; 
let consonantes = 0; 

for (let i = 0; i < palabra.length; i++) {
    const caracter = palabra[i];

if (/[aeiou]/.test(caracter)){vocales++;

    } else if (/[a-z]/.test(caracter)){consonantes++; 
        } 
}

return console.info(`La palabra "${palabra} tiene ${vocales} vocales y ${consonantes} consonantes"`);
}

contarVocales(); 
contarVocales("Hola Mundo"); 
contarVocales(4); 

console.log("........SOLUCION.........EJERCICIO 18....");

const contarLetras = (cadena = "") => {

if (!cadena) return console.info(`No ingresaste una cadena de texto `); 
if (typeof cadena !== 'string') return console.error(`El valor"${cadena}" no es una cadena de texto válida`);

let vocales = 0, 
consonantes = 0

cadena = cadena.toLocaleLowerCase();

for (let letra of cadena){
    if (/[aeiouáéíóúü]/.test(letra)) vocales++;
    
    if (/[bcdfghjklmnñpqrstvwxyz]/.test(letra)) consonantes++;
    }

return console.info({
    cadena,
    vocales,
    consonantes
})
}

contarLetras(); 
contarLetras(3); 
contarLetras("Hola Mundo"); 
contarLetras("Ñoño"); 
contarLetras("Lorem ipsum dolor sit amet"); 






















console.log(".................EJERCICIO 19..............");

/*
19) Programa una función que valide que un texto 
sea un nombre válido,
 pe. miFuncion("Jonathan MirCha") devolverá verdadero.
*/


validarNombre = (nombre = "") => {

if (!nombre) return console.info(`No ingresaste palabra o frase `); 

let expresionRegular = /^[a-zA-Z\s]+$/;
let esNombreValido = expresionRegular.test(nombre);  

console.info(`El "${nombre}" es ${esNombreValido ? "es" : "no es"} un nombre valido`);
return esNombreValido;
} 

validarNombre();
validarNombre("Alfredo Ríos");
validarNombre("123456");




console.log("........SOLUCION.........EJERCICIO 19....");

const validarNombre2 = (nombre = "") => {
    if (!nombre) return console.info(`No ingresaste palabra o frase `); 
    if (typeof nombre !== 'string') return console.error(`El valor"${nombre}" no es una cadena de texto válida`);

let expReg = /^[A-Za-ÑñÁÉÍÑOÚÜáéíóúü\s]+$/g.test(nombre);  

return (expReg)
    ? console.info(`"${nombre}", es un nombre válido`)
    : console.warn(`"${nombre}", NO es un nombre válido`)
}

validarNombre2();
validarNombre2(2);
validarNombre2("Jonathan MirCha");
validarNombre2("Jonathan MirCha,19");










console.log(".................EJERCICIO 20..............");
/*
20) Programa una función que valide que un texto 
sea un email válido, 
pe. miFuncion("jonmircha@gmail.com") devolverá verdadero.
*/

validarEmail = (email = "") => {
if (!email) return console.info(`No ingresaste palabra o frase `); 
if (typeof email !== 'string') return console.error(`"${email}" no es una cadena de texto válida`);

let expresionEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
let esEmailValido = expresionEmail.test(email);  

console.info(`El "${email}" ${esEmailValido ? "es" : "no es"} un email valido`);
return esEmailValido;
} 

validarEmail(); 
validarEmail("Hola"); 
validarEmail("hola@hotmail.com"); 


console.log("........SOLUCION.........EJERCICIO 20....");

const validarEmail2 = (email = "") => {
    if (!email) return console.info(`No ingresaste un email `); 
    if (typeof email !== 'string') return console.error(`El valor"${email}" no es un email valido`);

let expReg = /[a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,15})/i.test(email);  

return (expReg)
    ? console.info(`"${email}", es un email válido`)
    : console.warn(`"${email}", NO es un email válido`)
}

validarEmail2(); 
validarEmail2(2); 
validarEmail2("Hola"); 
validarEmail2("hola@hotmail.com"); 


/*
Fusion entre el 19 y el 20
*/
const validarPatron = ( cadena= "", patron = undefined) => {
    if (!cadena) return console.info(`No ingresaste una cadena de texto a evaluar `); 
    if (typeof cadena !== 'string') return console.error(`El valor"${cadena}" no es uuan cadena de texto`);

    if (!patron) return console.info(`No ingresaste un patron de texto a evaluar `); 
    if (!(patron instanceof RegExp)) return console.error(`El valor"${patron}" no es uuan cadena de texto`);

let expReg = patron.test(cadena); 

return (expReg)
    ? console.info(`"${cadena}", cumple con el patron ingresado`)
    : console.warn(`"${cadena}", NO cumple con el patron ingresado`)
}

validarPatron(); 
validarPatron({}); 
validarPatron("Hola Mundo"); 
validarPatron("Hola Mundo", "hola"); 
validarPatron("Hola Mundo", [1,2,3]); 
validarPatron("Jonathan MirCha", /^[A-Za-ÑñÁÉÍÑOÚÜáéíóúü\s]+$/g); 
validarPatron("Jonathan MirCha 19", /^[A-Za-ÑñÁÉÍÑOÚÜáéíóúü\s]+$/g); 
validarPatron("hola@hotmail.com", new RegExp("/[a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,15})/","i")); 
validarPatron("hola{{{{{@hotmail", new RegExp("/[a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,15})/","i")); 
validarPatron("hola@hotmail.com", new RegExp("[a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,15})","i")); 




















console.clear();
console.warn("SE HA EJECUTADO UN CLEAR PARA LOS EJ 18 - 20"); 


console.log(".................EJERCICIO 21..............");
/*
21) Programa una función que dado un array numérico devuelve 
otro array con los números elevados al cuadrado, 
pe. mi_funcion([1, 4, 5]) devolverá [1, 16, 25].
*/ 

const elevarAlCuadrado = (array) => {

if (!array) return console.info(`No ingresaste un array a evaluar `); 
if (!Array.isArray(array)) return console.error(`El valor ingresado no es un array. Coloca []`)
if (!array.every(numero => typeof numero === `number`)) return console.error(`El array contiene elementos que no son números`)

let resultado = array.map(numero => numero * numero); 

return console.info(`${array} elevado al quadrado es: ${resultado}`)
}

elevarAlCuadrado(); 
elevarAlCuadrado(123); 
elevarAlCuadrado(["Hola"]); 
elevarAlCuadrado([1,4,5]); 

console.log("........SOLUCION.........EJERCICIO 21....");

const devolverCuadrados= (arr = undefined) => {
if (arr === undefined) return console.warn(`No ingresaste un arreglo de números `); 
if (!(arr instanceof Array)) return console.error(`El valor que ingresaste no es un arreglo.`); 
if (arr.length === 0) return console.error(`El arreglo esta vacío.`); 
for (let num of arr) {if (typeof num !== "number") return console.error(`El valor "${num}" ingresado, NO es un número.`);}

    const newArr = arr.map(el => el* el);

return console.info(`Arreglo original: ${arr},\nArreglo elevado al cuadrado: ${newArr}`);
}

devolverCuadrados();
devolverCuadrados(true);
devolverCuadrados({});
devolverCuadrados([]);
devolverCuadrados([1, "3", 4, {}]);
devolverCuadrados([1, 4, {}]);
devolverCuadrados([1, 4, 8]);





















console.log(".................EJERCICIO 22..............");
/*
22) Programa una función que dado un array devuelva 
el número mas alto y el más bajo de dicho array, 
pe. miFuncion([1, 4, 5, 99, -60]) devolverá [99, -60].
*/

const arrayMaxMin = (array2) => {

if (!array2) return console.info(`No ingresaste un array a evaluar `); 
if (!Array.isArray(array2)) return console.error(`El valor ingresado no es un array. Coloca []`)
if (!array2.every(numero => typeof numero === `number`)) return console.error(`El array contiene elementos que no son números`)

let resMaximo = Math.max(...array2); 
let resMinimo = Math.min(...array2); 

return console.info(`${array2}, El número más alto es:`, [resMaximo],` y el más bajo es:`, [resMinimo]);
}

arrayMaxMin(); 
arrayMaxMin(123); 
arrayMaxMin(["Hola"]); 
arrayMaxMin([1,4,5,99,-60]); 

console.log("........SOLUCION.........EJERCICIO 22....");

const arrayMinMax= (arr = undefined) => {
if (arr === undefined) return console.warn(`No ingresaste un arreglo de números `); 
if (!(arr instanceof Array)) return console.error(`El valor que ingresaste no es un arreglo.`); 
if (arr.length === 0) return console.error(`El arreglo esta vacío.`); 
for (let num of arr) {if (typeof num !== "number") return console.error(`El valor "${num}" ingresado, NO es un número.`);}

return console.info(`Arreglo original: ${arr}\nValor mayor: ${Math.max(...arr)},\n y Valor menor: ${Math.min(...arr)}`);
}

arrayMinMax();
arrayMinMax(false);
arrayMinMax([]);
arrayMinMax([1, 2, true]);
arrayMinMax([1, 4, 5, 99, -60]);









console.log(".................EJERCICIO 23..............");
/*
23) Programa una función que dado un array de números devuelva 
un objeto con 2 arreglos en el primero almacena los números 
pares y en el segundo los impares, 
pe. miFuncion([1,2,3,4,5,6,7,8,9,0]) 
devolverá {pares: [2,4,6,8,0], impares: [1,3,5,7,9]}.
*/

const arrayParImpar = (array) => {

if (!array) return console.info(`No ingresaste un array a evaluar `); 
if (!Array.isArray(array)) return console.error(`El valor ingresado no es un array. Coloca []`)
if (!array.every(numero => typeof numero === `number`)) return console.error(`El array contiene elementos que no son números`)

let resultado = array.reduce((acc, num) => {
num % 2 === 0
    ? acc.pares.push(num)
    : acc.impares.push(num);
return acc;
        }, {pares: [], impares: []});
        console.info(`${array} los numeros pares son:`, resultado.pares,` y los impares son:`, resultado.impares);
               return resultado;
}

arrayParImpar(); 
arrayParImpar(123); 
arrayParImpar(["Hola"]); 
arrayParImpar([1,2,3,4,5,6,7,8,9,0]); 





console.log("........SOLUCION.........EJERCICIO 23....");

const separarParesImpares= (arr = undefined) => {
if (arr === undefined) return console.warn(`No ingresaste un arreglo de números `); 
if (!(arr instanceof Array)) return console.error(`El valor que ingresaste no es un arreglo.`); 
if (arr.length === 0) return console.error(`El arreglo esta vacío.`); 
for (let num of arr) {if (typeof num !== "number") return console.error(`El valor "${num}" ingresado, NO es un número.`);}

return console.info({
    pares: arr.filter(num => num % 2 === 0),
    impares: arr.filter(num => num % 2 === 1)
});
}

separarParesImpares();
separarParesImpares("Hola");
separarParesImpares([]);
separarParesImpares([2, 4, "j"]);
separarParesImpares([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);














console.clear();
console.warn("SE HA EJECUTADO UN CLEAR PARA LOS EJ 21 - 23"); 




console.log(".................EJERCICIO 24..............");
/*
24) Programa una función que dado un arreglo de números devuelva
un objeto con dos arreglos, el primero tendrá los numeros ordenados
en forma ascendente y el segundo de forma descendiente,
pe. miFuncion([7, 5,7,8,6]) devolverá { asc: [5,6,7,7,8], desc: [8,7,7,6,5] }.
*/

const ordenarAscDesc = (arr = undefined) => {
if (arr === undefined) return console.warn(`No ingresaste un arreglo de números `); 
if (!(arr instanceof Array)) return console.error(`El valor que ingresaste no es un arreglo.`); 
if (arr.length === 0) return console.error(`El arreglo esta vacío.`); 
for (let num of arr) {if (typeof num !== "number") return console.error(`El valor "${num}" ingresado, NO es un número.`);}

const ascendente = [...arr].sort((a, b) => a - b);
const descendente = [...arr].sort((a, b) => b - a);

return console.info({
    Ascendentes: ascendente,
    Descendientes: descendente
});
};


ordenarAscDesc();
ordenarAscDesc("Hola");
ordenarAscDesc([]);
ordenarAscDesc([2, 4, "j"]);
ordenarAscDesc([7, 5, 7, 8, 6]);


console.log("........SOLUCION.........EJERCICIO 24....")

ordenarArreglo = (arr = undefined) => {

if (arr === undefined) return console.warn(`No ingresaste un arreglo de números `);
if (!(arr instanceof Array)) return console.error(`El valor que ingresaste no es un arreglo.`);
if (arr.length === 0) return console.error(`El arreglo esta vacío.`);
for (let num of arr) {if (typeof num !== "number") return console.error(`El valor "${num}" ingresado, NO es un número.`);}

return console.info({
    arr,
    asc: arr.map(el => el).sort(),
    desc: arr.map(el => el).sort(). reverse(),

});

}

ordenarArreglo();
ordenarArreglo("Hola");
ordenarArreglo([]);
ordenarArreglo(3, {});
ordenarArreglo([7, 5, 7, 8, 6]);


















console.log(".................EJERCICIO 25..............");
/*
25) Programa una función que dado un arreglo de elementos,
elimine los duplicados,
pe. miFuncion(["x", 10, "x", 2, "10", 10, true, true])
devolverá ["x", 10, 2, "10", true].
*/


const arrEliminarDuplicados = (arr = undefined) => {

if (arr === undefined) return console.warn(`No ingresaste un arreglo de números `);
if (!(arr instanceof Array)) return console.error(`El valor que ingresaste no es un arreglo.`);
if (arr.length === 0) return console.error(`El arreglo esta vacío.`);

const sinDuplicados = [...new Set(arr)];

return console.info(sinDuplicados);



arrEliminarDuplicados();
arrEliminarDuplicados("Hola");
arrEliminarDuplicados([]);
arrEliminarDuplicados(["x", 10, "x", 2, "10", 10, true, true]);



console.log("........SOLUCION.........EJERCICIO 25....")

const quitarDuplicados = (arr = undefined) => {

if (arr === undefined) return console.warn(`No ingresaste un arreglo de números `);
if (!(arr instanceof Array)) return console.error(`El valor que ingresaste no es un arreglo.`);
if (arr.length === 0) return console.error(`El arreglo esta vacío.`);
if (arr.length === 1) return console.error(`El arreglo debe tener almenos 12 elementos`);

/* 1º tipo de solucion
return console.info({
orginal: arr,
sinDuplicados: arr.filter((value, index, self)=> self.indexOf(value) === index)
});
*/

//2nda Solucion
return console.info({
orginal: arr,
sinDuplicados: [...new Set(arr)]
});
}

quitarDuplicados();
quitarDuplicados("Hola");
quitarDuplicados([]);
quitarDuplicados(3, {});
quitarDuplicados(["x", 10, "x", 2, "10", 10, true, true]);

















console.log(".................EJERCICIO 26..............");
/*
26) Programa una función que dado un arreglo de números
obtenga el promedio,
pe. promedio([9,8,7,6,5,4,3,2,1,0]) devolverá 4.5.
*/

const arrPromedio = (arr = undefined) => {
if (arr === undefined) return console.warn(`No ingresaste un arreglo de números `); 
if (!(arr instanceof Array)) return console.error(`El valor que ingresaste no es un arreglo.`); 
if (arr.length === 0) return console.error(`El arreglo esta vacío.`); 
for (let num of arr) {if (typeof num !== "number") return console.error(`El valor "${num}" ingresado, NO es un número.`);}

const suma = arr.reduce((acc, num) => acc + num, 0);
const promedio = suma / arr.length;

return console.info(`El promedio es ${promedio}`);
}

arrPromedio();
arrPromedio("Hola");
arrPromedio([]);
arrPromedio([1 ,2, "J"]);
arrPromedio([9,8,7,6,5,4,3,2,1,0]);

console.log("........SOLUCION.........EJERCICIO 26....")

const promedio = (arr= undefined) => {

if (arr === undefined) return console.warn(`No ingresaste un arreglo de números `);
if (!(arr instanceof Array)) return console.error(`El valor que ingresaste no es un arreglo.`);
if (arr.length === 0) return console.error(`El arreglo esta vacío.`);
for (let num of arr) {if (typeof num !== "number") return console.error(`El valor "${num}" ingresado, NO es un número.`);}

    return console.info(
        arr.reduce((total, num, index, arr)=> {
        total += num;
            if (index === arr.length -1){
                return `El promedio de ${arr.join(" + ")} es ${total / arr.length}`;
            } else {
                return total;
                }
        })
    );
};

promedio();
promedio("Hola");
promedio([]);
promedio([2, true]);
promedio([9,8,7,6,5,4,3,2,1,0]);











console.clear();
console.warn("SE HA EJECUTADO UN CLEAR PARA LOS EJ 24 - 26"); 


console.log(".................EJERCICIO 27..............");
/*
27) Programa una clase llamada Pelicula.

La clase recibirá un objeto al momento de instanciarse 
con los siguentes datos: 
    id de la película en IMDB,
    titulo, 
    director, 
    año de estreno,
    país o países de origen, 
    géneros 
    y calificación en IMBD.

    -Todos los datos del objeto son obligatorios.
  - Valida que el id IMDB tenga 9 caracteres, los primeros 2 sean letras y los 
     7 restantes números.
  - Valida que el título no rebase los 100 caracteres.
  - Valida que el director no rebase los 50 caracteres.
  - Valida que el año de estreno sea un número entero de 4 dígitos.
  - Valida que el país o paises sea introducidos en forma de arreglo.
  - Valida que los géneros sean introducidos en forma de arreglo.
  - Valida que los géneros introducidos esten dentro de los géneros 
     aceptados*.
  - Crea un método estático que devuelva los géneros aceptados*.
  - Valida que la calificación sea un número entre 0 y 10 pudiendo ser 
    decimal de una posición.
  - Crea un método que devuelva toda la ficha técnica de la película.
  - Apartir de un arreglo con la información de 3 películas genera 3 
    instancias de la clase de forma automatizada e imprime la ficha técnica 
    de cada película.

    * Géneros Aceptados: Action, Adult, Adventure, Animation, Biography, Comedy, 
    Crime, Documentary ,Drama, Family, Fantasy, Film Noir, Game-Show, History,
     Horror, Musical, Music, Mystery, News, Reality-TV, Romance, Sci-Fi, Short,
      Sport, Talk-Show, Thriller, War, Western.
*/

/*
class Pelicula {
  static GENEROS_ACEPTADOS = [
    "Action", "Adult", "Adventure", "Animation", "Biography", "Comedy", 
    "Crime", "Documentary", "Drama", "Family", "Fantasy", "Film Noir", 
    "Game-Show", "History", "Horror", "Musical", "Music", "Mystery", 
    "News", "Reality-TV", "Romance", "Sci-Fi", "Short", "Sport", 
    "Talk-Show", "Thriller", "War", "Western"
  ];

  constructor(id_imdb, titulo, director, anio_estreno, paises, generos, calificacion) {
    this.id_imdb = id_imdb;
    this.titulo = titulo;
    this.director = director;
    this.anio_estreno = anio_estreno;
    this.paises = paises;
    this.generos = generos;
    this.calificacion = calificacion;
    this.validarDatos();
  }

  validarDatos() {
    // Validar id_imdb
    if (typeof this.id_imdb !== 'string' || this.id_imdb.length !== 9 || 
        !/^[a-zA-Z]{2}\d{7}$/.test(this.id_imdb)) {
      throw new Error("El id IMDB debe tener 9 caracteres, los primeros 2 letras y los 7 restantes números.");
    }

    // Validar titulo
    if (typeof this.titulo !== 'string' || this.titulo.length > 100) {
      throw new Error("El título no debe rebasar los 100 caracteres.");
    }

    // Validar director
    if (typeof this.director !== 'string' || this.director.length > 50) {
      throw new Error("El nombre del director no debe rebasar los 50 caracteres.");
    }

    // Validar año de estreno
    if (typeof this.anio_estreno !== 'number' || !Number.isInteger(this.anio_estreno) || 
        this.anio_estreno < 1000 || this.anio_estreno > 9999) {
      throw new Error("El año de estreno debe ser un número entero de 4 dígitos.");
    }

    // Validar paises
    if (!Array.isArray(this.paises) || !this.paises.every(pais => typeof pais === 'string')) {
      throw new Error("El país o países deben ser introducidos en forma de arreglo de cadenas.");
    }

    // Validar generos
    if (!Array.isArray(this.generos) || !this.generos.every(genero => Pelicula.GENEROS_ACEPTADOS.includes(genero))) {
      throw new Error("Los géneros deben ser introducidos en forma de arreglo y deben estar dentro de los géneros aceptados.");
    }

    // Validar calificacion
    if (typeof this.calificacion !== 'number' || this.calificacion < 0 || this.calificacion > 10) {
      throw new Error("La calificación debe ser un número entre 0 y 10, pudiendo ser decimal de una posición.");
    }
  }

  static generosAceptados() {
    return Pelicula.GENEROS_ACEPTADOS;
  }

  fichaTecnica() {
    return `Título: ${this.titulo}\n` +
           `Director: ${this.director}\n` +
           `Año de Estreno: ${this.anio_estreno}\n` +
           `País(es): ${this.paises.join(', ')}\n` +
           `Géneros: ${this.generos.join(', ')}\n` +
           `Calificación: ${this.calificacion}\n` +
           `ID IMDB: ${this.id_imdb}`;
  }
}

// Crear instancias de la clase Pelicula a partir de un arreglo de información
const peliculasInfo = [
  {
    id_imdb: "tt1234567",
    titulo: "Película Ejemplo 1",
    director: "Director Ejemplo",
    anio_estreno: 2001,
    paises: ["USA"],
    generos: ["Action", "Drama"],
    calificacion: 7.5
  },
  {
    id_imdb: "tt7654321",
    titulo: "Película Ejemplo 2",
    director: "Otro Director",
    anio_estreno: 1999,
    paises: ["Canada", "France"],
    generos: ["Comedy", "Romance"],
    calificacion: 8.3
  },
  {
    id_imdb: "tt2345678",
    titulo: "Película Ejemplo 3",
    director: "Director Famoso",
    anio_estreno: 2015,
    paises: ["UK"],
    generos: ["Sci-Fi", "Thriller"],
    calificacion: 9.0
  }
];

// Crear y mostrar la ficha técnica de cada película
peliculasInfo.forEach(info => {
  const pelicula = new Pelicula(
    info.id_imdb, info.titulo, info.director, info.anio_estreno, 
    info.paises, info.generos, info.calificacion
  );
  console.log(pelicula.fichaTecnica());
  console.log("-".repeat(40));
});
*/

console.log("........SOLUCION.........EJERCICIO 27....")

/*
27) Programa una clase llamada Pelicula.

La clase recibirá un objeto al momento de instanciarse 
con los siguentes datos: 
    id de la película en IMDB,
    titulo, 
    director, 
    año de estreno,
    país o países de origen, 
    géneros 
    y calificación en IMBD.

    -Todos los datos del objeto son obligatorios.
OK- Valida que el id IMDB tenga 9 caracteres, los primeros 2 sean letras y los 7 restantes números.
OK- Valida que el título no rebase los 100 caracteres.
OK- Valida que el director no rebase los 50 caracteres.
OK- Valida que el año de estreno sea un número entero de 4 dígitos.
OK- Valida que el país o paises sea introducidos en forma de arreglo.
OK- Valida que los géneros sean introducidos en forma de arreglo.
OK- Valida que los géneros introducidos esten dentro de los géneros aceptados*.
OK - Crea un método estático que devuelva los géneros aceptados*.
OK- Valida que la calificación sea un número entre 0 y 10 pudiendo ser decimal de una posición.
OK- Crea un método que devuelva toda la ficha técnica de la película.
OK- Apartir de un arreglo con la información de 3 películas genera 3 instancias de la clase de forma automatizada e imprime la ficha técnica de cada película.

* Géneros Aceptados: Action, Adult, Adventure, Animation, Biography, Comedy, 
  Crime, Documentary ,Drama, Family, Fantasy, Film Noir, Game-Show, History,
  Horror, Musical, Music, Mystery, News, Reality-TV, Romance, Sci-Fi, Short,
  Sport, Talk-Show, Thriller, War, Western.
*/

class Pelicula {

constructor ({id, titulo, director, estreno, pais, generos, calificacion }) {
this.id = id;
this.titulo = titulo;
this.director = director;
this.estreno = estreno;
this.pais = pais;
this.generos = generos;
this.calificacion = calificacion;

this.validarIMDB(id);
this.validarTitulo(titulo);
this.validarDirector(director);
this.validarEstreno(estreno);
this.validarPais(pais);
this.validarGeneros(generos);
this.validarCalificacion(calificacion);

}
//Atributos estaticos PASO 1
static get listaGeneros(){
    return ["Action", "Adult", "Adventure", "Animation", "Biography", "Comedy","Crime", "Documentary" ,"Drama", "Family", "Fantasy", "Film Noir", "Game-Show", "History", "Horror", "Musical", "Music", "Mystery", "News", "Reality-TV", "Romance", "Sci-Fi", "Short", "Sport", "Talk-Show", "Thriller", "War", "Western"];
}
//Metodo estatico aceptado PASO 2
static generosAceptados(){
    return console.info(`Los géneros aceptados son: ${Pelicula.listaGeneros.join(", ")}`);
}

    //Validaciones GENERICAS
    validarCadena(propiedad, valor){
if (!valor) return console.warn(`${propiedad} "${valor}" esta vacío.`);
if (typeof valor!== "string") return console.error(`${propiedad} "${valor}" ingresado, NO es una cadena de texto.`);
return true;
    }

    ValidarLongitudCadena(propiedad, valor, longitud){
if (valor.length > longitud) return console.error(`${propiedad} "${valor}" excede el número de caracteres permitidos (${longitud}).`);
return true;
    }

    validarNumero(propiedad, valor){
if (!valor) return console.warn(`${propiedad} "${valor}" esta vacío.`);
if (typeof valor!== "number") return console.error(`${propiedad} "${valor}" ingresado, NO es un número.`);
return true;
    }

    validarArreglo(propiedad, valor){
if (!valor) return console.warn(`${propiedad} "${valor}" esta vacío.`);
if (!(valor instanceof Array)) return console.error(`${propiedad} "${valor}" ingresado, NO es un arreglo.`);
if (valor.length === 0) return console.error(`${propiedad} "${valor}" no tiene datos`);
for (let cadena of valor) {if (typeof cadena !== "string") return console.error(`El valor "${cadena}" ingresado, NO es una cadena de texto`);}
return true;
    }

// Valida que el id IMDB tenga 9 caracteres, los primeros 2 sean letras y los 7 restantes números.
    validarIMDB (id){
        if (this.validarCadena("IMDB id", id))
        if (!(/^([a-z]){2}([0-9]){7}$/.test(id)))
        return console.error(`IMDB id "${id}" no es válido, debe tener 9 caracteres, los 2 primeros letras minúsculas, los 7 restantes números.`);
        }
//Valida que el título no rebase los 100 caracteres.
        validarTitulo (titulo){
        if (this.validarCadena("Título", titulo))
        this.ValidarLongitudCadena("Título", titulo, 100)
        }
//- Valida que el director no rebase los 50 caracteres.
        validarDirector (director){
        if (this.validarCadena("Director", director))
        this.ValidarLongitudCadena("Director", director, 50)
        }
//- Valida que el año de estreno sea un número entero de 4 dígitos.
        validarEstreno (estreno){
        if (this.validarNumero("Año de Estreno", estreno))
        if (!(/^([0-9]){4}$/.test(estreno)))
        return console.error(`Año de Estreno "${estreno}" no es válido, debe tener un número de 4 digitos.`);
        }
//- Valida que el país o paises sea introducidos en forma de arreglo.
        validarPais (pais){
            this.validarArreglo("Pais", pais)
        }
//Valida que los géneros sean introducidos en forma de arreglo. 
//Valida que los géneros introducidos esten dentro de los géneros aceptados*.
        validarGeneros (generos){
            if (this.validarArreglo("Géneros", generos)){
                for (let genero of generos){
                   // console.log(genero, Pelicula.listaGeneros.includes(genero));
                    if (!Pelicula.listaGeneros.includes(genero)){
                       console.error(`Género(s) incorrectos "${generos.join(", ")}"`); 
                       Pelicula.generosAceptados();
                    }
                }
            }
        }
// Valida que la calificación sea un número entre 0 y 10 pudiendo ser decimal de una posición.
        validarCalificacion (calificacion){
        if (this.validarNumero("Calificación", calificacion))
        return (calificacion < 0 || calificacion >10) 
                ? console.error (`La calificación tiene que estar en un rango de 0 y 10`)
                : this.calificacion = calificacion.toFixed(1)
        }
// Crea un método que devuelva toda la ficha técnica de la película.
fichaTecnica(){
console.info(`Ficha Técnica:\n Título: "${this.titulo}"\nDirector: "${this.director}"\nAño: "${this.estreno}"\nPaís: "${this.pais.join("-")}"\nGéneros: "${this.generos.join(", ")}"\nCalificación: "${this.calificacion}"\nIMDB Id: "${this.id}"`)
}


}
// Invocacion del atributo PASO 3
//Pelicula.generosAceptados();

//Instancia
const peli = new Pelicula ({
id: "tt1234567",
titulo: "Título de la Pei",
director: "Director de la Peli",
estreno: 2020,
pais: ["Mexico"],
generos: ["Comedy", "Sport"],
calificacion: 7.789,

});

peli.fichaTecnica();

const misPelis= [
{
id: "tt0758758",
titulo:"Into The Wild",
director: "Sean Penn",
estreno:2007,
pais: ["USA"],
generos: ["Adventure", "Biography", "Drama"],
calificacion: 8.1
},
{
id: "tt0479143",
titulo:"Rocky Balboa",
director: "Sylvester Stallone",
estreno:2007,
pais: ["USA"],
generos: ["Action", "Sport", "Drama"],
calificacion: 7.1
},
{
id: "tt0468569",
titulo:"The Dark Knight",
director: "Christopher Nolan",
estreno:2008,
pais: ["USA","UK"],
generos: ["Action", "Crime", "Drama"],
calificacion: 9.0
}
]; 

misPelis.forEach(el => new Pelicula(el).fichaTecnica());











</script>
</body>
</html>
